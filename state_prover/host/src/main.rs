// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{STATE_PROVER_ELF, STATE_PROVER_ID};
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt, Groth16Proof};
use serde::{Deserialize, Serialize};
use std::fs::File;
use std::io::Write;
use std::path::Path;
mod merkleTree;
use crate::merkleTree::MerkleTree;

#[derive(Serialize, Deserialize, Debug,Clone)]
pub struct Inputs {
    pub state_t_1: String, // merkle root of the state at t+1 (all the blocks)
    pub state_t: String, // merkle root of the state at t (all the blocks)
    pub blocks_hash: Vec<String>, // hash of each block
} 
fn main(){
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
    let input = Inputs {
        state_t_1: "71d8979cbfae9b197a4fbcc7d387b1fae9560e2f284d30b4e90c80f6bc074f57".to_string(),
        state_t: "1".to_string(),
        blocks_hash: vec!["2".to_string()],
    };

    let mut combined = Vec::new();
    combined.push(input.state_t.clone());
    combined.extend(input.blocks_hash.clone());
    let mut tree = MerkleTree::new(&combined).expect("Failed to create Merkle Tree");
    let root = tree.root.expect("Failed to get root");
    if(input.state_t_1 == root.data) {
        let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();
        let prover = default_prover();
        println!("Running the prover...");
        let receipt = prover.prove(env, STATE_PROVER_ELF).unwrap();


        println!("Verifying the prover...");
        assert!(&receipt.verify(STATE_PROVER_ID).is_ok());
        println!("Proof verified!");
        let (state_t_1, state_t): (String, String) =
        receipt.journal.decode().unwrap();
        let proof = receipt.inner.groth16();
        println!("Proof: {:?}", proof);
        println!(
        "Verified the state transition from {} to {}",
        state_t, state_t_1
        );
    }else{
        println!("Roots do not match");
    }
}
